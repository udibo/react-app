name: CI
on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
        default: './'
      app-directory:
        required: false
        type: string
      lint-args:
        required: false
        type: string
        default: ''
      fmt-args:
        required: false
        type: string
        default: ''
      test-args:
        required: false
        type: string
        default: ''
    secrets:
      CODECOV_TOKEN:
        required: false
jobs:
  secrets:
    name: Get secrets
    runs-on: ubuntu-latest
    outputs:
      CODECOV_TOKEN: ${{ steps.secrets.outputs.CODECOV_TOKEN }}
    steps:
      - id: secrets
        name: Get secrets
        if: env.CODECOV_TOKEN != ''
        run: |
          if ["${{ secrets.CODECOV_TOKEN }}" != ""];
          then
            echo "::set-output name=CODECOV_TOKEN::'${{ secrets.CODECOV_TOKEN }}'"
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3.3.0
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Lint source files
        working-directory: ${{ inputs.working-directory }}
        run: deno lint ${{ inputs.lint-args }}
  format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3.3.0
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Check formatting
        working-directory: ${{ inputs.working-directory }}
        run: deno fmt --check ${{ inputs.fmt-args }}
  test:
    name: Test ${{ matrix.os }}
    needs: [secrets, lint, format]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: true
    env:
      APP_ENV: test
    steps:
      - name: Clone repository
        uses: actions/checkout@v3.3.0
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Build
        working-directory: ${{ inputs.app-directory || inputs.working-directory }}
        run: deno task build
      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        if: |
          matrix.os != 'ubuntu-latest'
          || !needs.secrets.outputs.CODECOV_TOKEN
        run: deno test ${{ inputs.test-args }} .
      - name: Run tests and collect coverage
        working-directory: ${{ inputs.working-directory }}
        if: |
          matrix.os == 'ubuntu-latest'
          && needs.secrets.outputs.CODECOV_TOKEN
        run: deno test --coverage=cov ${{ inputs.test-args }} .
      - name: Generate coverage
        working-directory: ${{ inputs.working-directory }}
        if: |
          matrix.os == 'ubuntu-latest'
          && needs.secrets.outputs.CODECOV_TOKEN
        run: deno coverage --lcov=cov ${{ inputs.test-args }} > cov.lcov
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ${{ inputs.working-directory }}/cov.lcov
          token: ${{ needs.secrets.outputs.CODECOV_TOKEN }}
          fail_ci_if_error: true
        if: |
          matrix.os == 'ubuntu-latest'
          && needs.secrets.outputs.CODECOV_TOKEN
